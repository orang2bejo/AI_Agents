name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install development dependencies
      run: |
        pip install -r requirements-dev.txt
    
    - name: Install additional test dependencies
      run: |
        pip install pytest-xdist pytest-timeout pytest-mock
    
    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check windows_use/ scripts/ tests/ --output-format=github
    
    - name: Format check with black
      run: |
        pip install black
        black --check --diff windows_use/ scripts/ tests/
    
    - name: Type check with mypy
      run: |
        mypy windows_use/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r windows_use/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Test core imports
      run: |
        python -c "import windows_use; print('Core imports successful')"
    
    - name: Run tests with pytest (skip Office if unavailable)
      run: |
        pytest tests/ -v --tb=short --maxfail=5 --timeout=300 -m "not office or office_available"
      env:
        PYTHONPATH: ${{ github.workspace }}
        SKIP_OFFICE_TESTS: "true"
    
    - name: Run installation test
      run: |
        python test_installation.py

    - name: Upload audit reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: audit-reports
        path: audit_reports/
    
    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage xml
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx mkdocs mkdocs-material
    
    - name: Build documentation
      run: |
        echo "Documentation build placeholder"
        # mkdocs build
      continue-on-error: true

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install memory-profiler psutil
    
    - name: Run performance tests
      run: |
        echo "Performance testing placeholder"
        # python -m memory_profiler scripts/jarvis_main.py --help
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-docs]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' }}
      run: echo "✅ All tests passed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' }}
      run: echo "❌ Tests failed. Please check the logs."

  supply-chain:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Generate SBOM
      run: |
        pip install cyclonedx-bom
        cyclonedx-py --format json --output sbom.json

    - name: Scan secrets
      uses: gitleaks/gitleaks-action@v2
      with:
        args: '--no-git --path .'

    - name: CVE audit
      run: |
        pip install pip-audit
        pip-audit > cve-report.txt || true

    - name: Upload supply-chain artifacts
      uses: actions/upload-artifact@v3
      with:
        name: supply-chain
        path: |
          sbom.json
          cve-report.txt
